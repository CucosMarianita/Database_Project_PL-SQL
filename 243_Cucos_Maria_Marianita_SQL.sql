

CREATE TABLE FABRICA (
    Id_fabrica number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,  
    Locatie varchar2(200) NOT NULL,
    Nume varchar2(100) NOT NULL,
    CONSTRAINT PKEY_FABRICA PRIMARY KEY(Id_fabrica)
    );

INSERT INTO FABRICA(locatie,nume)
VALUES ('Bucuresti','Mob Expert');
INSERT INTO FABRICA(locatie,nume)
VALUES ('Ploiesti','Mob Expert');
INSERT INTO FABRICA(locatie,nume)
VALUES ('Bucuresti','The home');
INSERT INTO FABRICA(locatie,nume)
VALUES ('Constanta','Your furniture');
INSERT INTO FABRICA(locatie,nume)
VALUES ('Brasov','Mob Design');

select * from FABRICA;


CREATE TABLE HALA(
	Id_hala number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	Suprafata FLOAT  NOT NULL, 
	Nume VARCHAR2(100) NOT NULL, 
	Id_fabrica number, 
    CONSTRAINT SUPRAFATA_HALA CHECK (Suprafata>=150 AND Suprafata<=1000),
	CONSTRAINT FK_HALA FOREIGN KEY(Id_fabrica) REFERENCES FABRICA(Id_fabrica),
    CONSTRAINT PKEY_HALA PRIMARY KEY (Id_hala)
    );

INSERT INTO HALA(suprafata, nume, id_fabrica)
VALUES (200,'corp A',1 );
INSERT INTO HALA(suprafata, nume, id_fabrica)
VALUES (500,'corp AB',1 );
INSERT INTO HALA(suprafata, nume, id_fabrica)
VALUES (250,'corp B',2 );
INSERT INTO HALA(suprafata, nume, id_fabrica)
VALUES (900,'corp 1',3 );
INSERT INTO HALA(suprafata, nume, id_fabrica)
VALUES (300,'corp 2',3 );
INSERT INTO HALA(suprafata, nume, id_fabrica)
VALUES (500,'corp A',4 );
INSERT INTO HALA(suprafata, nume, id_fabrica)
VALUES (680,'corp B',5 );

SELECT * FROM HALA;




CREATE TABLE DEPARTAMENT(
	Id_departament number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	Nume VARCHAR2(100) NOT NULL, 
	Id_hala INT, 
    CONSTRAINT PKEY_DEPARTAMENT PRIMARY KEY(Id_departament),
	CONSTRAINT FK_DEPARTAMENT FOREIGN KEY(Id_hala) REFERENCES HALA(Id_hala) );

INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('impachetare', 2);
INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('modelare', 2);
INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('ansamblare', 3);
INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('design', 4);
INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('finisare', 3);
INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('livrare', 6);
INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('taiere', 7);
INSERT INTO DEPARTAMENT(nume, id_hala)
VALUES ('design', 7);

SELECT * FROM DEPARTAMENT;


CREATE TABLE ANGAJAT(
	Id_angajat number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1, 
	Nume VARCHAR2(50) NOT NULL, 
	Prenume VARCHAR2(100) NOT NULL,
	CNP varchar2(20) NOT NULL,
	Salariu FLOAT DEFAULT 0,
	Data_angajare DATE NOT NULL,
	Telefon varchar2(20) NOT NULL,
	Sex VARCHAR2(10) NOT NULL, 
	Mail VARCHAR2(100),
	Id_departament INT, 
    CONSTRAINT PKEY_ANGAJAT PRIMARY KEY(Id_angajat),
    CONSTRAINT CNP_ANGAJAT UNIQUE (CNP), CHECK (LENGTH(CNP)=13),
    CONSTRAINT SEX_ANGAJAT CHECK (Sex in ('F','M')),
	CONSTRAINT FK_ANGAJAT FOREIGN KEY(Id_departament) REFERENCES DEPARTAMENT(Id_departament) 
    );


INSERT INTO ANGAJAT (nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament)
VALUES ('Popa','Alex', 1760523567832, 3000, to_date('2010-07-16', 'yyyy-mm-dd') , '0763247942', 'M', 'popaalex@yahoo.com',2);
INSERT INTO ANGAJAT (nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament)
VALUES ('Mincu','Elena', 2950319789954 , 4500, to_date('2015-10-18','yyyy-mm-dd'), '0764674378', 'F', 'm_elena@gmail.com',4);
INSERT INTO ANGAJAT (nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament)
VALUES ('Lazar','Claudiu', 5000219479822, 4000, to_date('2021-09-01','yyyy-mm-dd'), '0762748895', 'M', 'claudiu_lazar@gmail.com',4);
INSERT INTO ANGAJAT(nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament) 
VALUES ('Zapachi','Mihai', 1850416452896, 3200, to_date('2008-03-05','yyyy-mm-dd'), '0761487529', 'M', 'zapachi@gmail.com',6);
INSERT INTO ANGAJAT(nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament) 
VALUES ('Constantin','Andrei', 1860421678942, 3000, to_date('2019-07-12','yyyy-mm-dd'), '0764267481', 'M', null,5);
INSERT INTO ANGAJAT(nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament) 
VALUES ('Alecu','Raluca', 2890627898429, 2800, to_date('2020-11-08','yyyy-mm-dd'), '0762485571', 'F', 'ralu.alecu@yahoo.com',5);
INSERT INTO ANGAJAT(nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament) 
VALUES ('Popa','Marian', 1990514589617, 5000, to_date('2022-06-01','yyyy-mm-dd'), '0762458697', 'M', null,8);
INSERT INTO ANGAJAT (nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament)
VALUES ('Panaite','Valentin', 1850419526379, 4200, to_date('2021-09-16','yyyy-mm-dd'), '0762154786', 'M', null,5);
INSERT INTO ANGAJAT (nume, prenume, cnp, salariu,data_angajare,telefon,sex,mail,id_departament)
VALUES ('Vlad','Andrei', 1900825896754, 1710, to_date('2022-02-10','yyyy-mm-dd'), '0762547845', 'M', null,1);

SELECT * FROM ANGAJAT;



CREATE TABLE FURNIZOR(
	Id_furnizor number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,  
	Nume VARCHAR2(100) NOT NULL, 
	Telefon varchar2(20) NOT NULL,
	Mail VARCHAR2(100) NOT NULL,
    CONSTRAINT PKEY_FURNIZOR PRIMARY KEY(Id_furnizor),
    CONSTRAINT MAIL_FURNIZOR UNIQUE(Mail), CHECK (Mail like '%_@__%.__%')
    );


INSERT INTO FURNIZOR(nume, telefon, mail)
VALUES ('AlexCo','0745267759','alexcoSRL@gmail.com');
INSERT INTO FURNIZOR (nume, telefon, mail)
VALUES ('Androstal','0761254895','androstal@gmail.com');
INSERT INTO FURNIZOR (nume, telefon, mail)
VALUES ('Deccons','0748264818','Deccons@gmail.com');
INSERT INTO FURNIZOR (nume, telefon, mail)
VALUES ('Inoveco','0746958725','InovecoSRL@gmail.com');
INSERT INTO FURNIZOR (nume, telefon, mail)
VALUES ('CRH Romania','0764259583','CRH_Romania@yahoo.com');
INSERT INTO FURNIZOR (nume, telefon, mail)
VALUES ('Deppo','0761459027','deppoSRL@gmail.com');

SELECT * FROM FURNIZOR;


CREATE TABLE MATERIAL(
	Id_material number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1, 
	Nume VARCHAR2(100) NOT NULL, 
	Cantitate number DEFAULT 0,
	Categorie VARCHAR2(100) NOT NULL, 
	Id_fabrica number, 
	CONSTRAINT FK1_MATERIAL FOREIGN KEY(Id_fabrica) REFERENCES FABRICA(Id_fabrica),
	Id_furnizor number, 
	CONSTRAINT FK2_MATERIAL FOREIGN KEY(Id_furnizor) REFERENCES FURNIZOR(Id_furnizor),
    CONSTRAINT PKEY_MATERIAL PRIMARY KEY(Id_material)
    );


INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('lemn stejar',100,'lemn', 1, 3);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('lemn mahon',120,'lemn', 1, 6);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('lemn cires',105,'lemn', 1, 3);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('sticla cenusie',8,'sticla', 5, 3);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('sticla neagra',50,'sticla', 1, 3);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('surub M5',5,'surub', 4, 5);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('maner auriu',34,'accesorii', 4, 2);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('surub M10',100,'surub', 2, 4);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('surub M30',9,'surub', 2, 4);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('lemn fag',2,'lemn', 1, 5);
INSERT INTO MATERIAL(nume, cantitate, categorie, id_fabrica, id_furnizor)
VALUES ('maner metal',3,'accesorii', 3, 2);

SELECT * FROM MATERIAL;


CREATE TABLE PRODUS(
	Id_produs number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	Categorie VARCHAR2(100) NOT NULL,
	Nume VARCHAR2(100) NOT NULL,
	Pret INT NOT NULL,
	Dimensiune VARCHAR2(100) NOT NULL,
    CONSTRAINT PKEY_PRODUS PRIMARY KEY(Id_produs)
    );

INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('dormitor', 'sifonier 3 usi', 2500, '250x50x200');
INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('dormitor', 'sifonier 2 usi', 1900, '120x50x200');
INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('dormitor', 'pat mahon', 2000, '200x150x40');
INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('baie', 'dulap cu sertare', 900, '60x40x180');
INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('sufragerie', 'masa cafea', 500, '100x60x50');
INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('sufragerie', 'biblioteca', 4500, '270x40x200');
INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('bucatarie', 'masa stejar', 1200, '200x60x80');
INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('bucatarie', 'scaun cires', 150, '100x40x40');

SELECT * FROM PRODUS;
	

CREATE TABLE CLIENT(
	Id_client number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1, 
	Nume VARCHAR2(100) NOT NULL, 
	Prenume VARCHAR2(100) NOT NULL,
	Telefon VARCHAR2(20) NOT NULL,
	Mail VARCHAR2(100) NOT NULL,
    CONSTRAINT PKEY_CLIENT PRIMARY KEY(Id_client),
    CONSTRAINT MAIL_CLIENT UNIQUE(Mail), CHECK (Mail like '%_@__%.__%')
    );


INSERT INTO CLIENT(nume, prenume, telefon, mail)
VALUES ('Diaconu','Madalin', '0763479586','m.diaconu78@gmail.com');
INSERT INTO CLIENT(nume, prenume, telefon, mail)
VALUES ('Florea','Andreea', '0761485722','andreea-fl@gmail.com');
INSERT INTO CLIENT(nume, prenume, telefon, mail)
VALUES ('Andrei','Costin', '0762175984','costi@gmail.com');
INSERT INTO CLIENT(nume, prenume, telefon, mail)
VALUES ('Balan','Roxana', '0764598746','RoxBalan@gmail.com');
INSERT INTO CLIENT(nume, prenume, telefon, mail)
VALUES ('Nita','Claudia', '0761457957','nita_claudia@gmail.com');
INSERT INTO CLIENT(nume, prenume, telefon, mail)
VALUES ('Popa','Radu', '0763473695','poparadu@gmail.com');

SELECT * FROM CLIENT;



CREATE TABLE FACTURA(
	Id_factura number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1, 
	Total_plata FLOAT NOT NULL,
	Data DATE NOT NULL,
	Id_client INT, 
	CONSTRAINT FK_FACTURA FOREIGN KEY(Id_client) REFERENCES CLIENT(Id_client),
    CONSTRAINT PKEY_FACTURA PRIMARY KEY(Id_factura)
    );

INSERT INTO FACTURA(total_plata, data, id_client)
VALUES (4500, to_date('2022-03-11', 'yyyy-mm-dd'), 1);
INSERT INTO FACTURA(total_plata, data, id_client)
VALUES (7500,to_date('2022-05-28', 'yyyy-mm-dd'), 2);
INSERT INTO FACTURA(total_plata, data, id_client)
VALUES (2500,to_date('2022-01-22', 'yyyy-mm-dd'), 2);
INSERT INTO FACTURA(total_plata, data, id_client)
VALUES (4000,to_date('2021-10-07', 'yyyy-mm-dd'), 3);
INSERT INTO FACTURA(total_plata, data, id_client)
VALUES (900,to_date('2020-12-03', 'yyyy-mm-dd'), 4);
INSERT INTO FACTURA(total_plata, data, id_client)
VALUES (720,to_date('2022-06-10', 'yyyy-mm-dd'), 5);
INSERT INTO FACTURA(total_plata, data, id_client)
VALUES (11000,to_date('2021-07-13', 'yyyy-mm-dd'), 6);

SELECT * FROM FACTURA;



CREATE TABLE COMANDA_PRODUS(
	Id_comanda number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,  
	Data DATE NOT NULL,
	Deadline DATE  NOT NULL,
	Id_fabrica INT, 
	CONSTRAINT FK1_COMANDA_PRODUS FOREIGN KEY(Id_fabrica) REFERENCES FABRICA(Id_fabrica),
	Id_client INT, 
	CONSTRAINT FK2_COMANDA_PRODUS FOREIGN KEY(Id_client) REFERENCES CLIENT(Id_client),
    CONSTRAINT PKEY_COMANDA_PRODUS PRIMARY KEY(Id_comanda)
    );

INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20220415', 'yyyy-mm-dd'),to_date('20220615', 'yyyy-mm-dd'), 1, 3);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20210810', 'yyyy-mm-dd'),to_date('20211101', 'yyyy-mm-dd'), 1, 2);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20200415', 'yyyy-mm-dd'),to_date('20200515', 'yyyy-mm-dd'), 1, 5);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20220127', 'yyyy-mm-dd'),to_date('20220301', 'yyyy-mm-dd'), 3, 6);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20211117', 'yyyy-mm-dd'),to_date('20220128', 'yyyy-mm-dd'), 3, 1);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20210801', 'yyyy-mm-dd'),to_date('20210915', 'yyyy-mm-dd'), 1, 3);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20210508', 'yyyy-mm-dd'),to_date('20210805', 'yyyy-mm-dd'), 3, 4);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20210219', 'yyyy-mm-dd'),to_date('20210401', 'yyyy-mm-dd'), 4, 3);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20220108', 'yyyy-mm-dd'),to_date('20220301', 'yyyy-mm-dd'), 2, 2);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20210510', 'yyyy-mm-dd'),to_date('20210707', 'yyyy-mm-dd'), 2, 5);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20220504', 'yyyy-mm-dd'),to_date('20220601', 'yyyy-mm-dd'), 4, 3);
INSERT INTO COMANDA_PRODUS(data, deadline, id_fabrica, id_client)
VALUES(to_date('20210725', 'yyyy-mm-dd'),to_date('20210815', 'yyyy-mm-dd'), 5, 1);

SELECT * FROM COMANDA_PRODUS;



CREATE TABLE COMANDA_STANDARD(
	Id_comanda INT, 
	CONSTRAINT FK_COMANDA_STANDARD FOREIGN KEY(Id_comanda) REFERENCES COMANDA_PRODUS(Id_comanda),
	Nume_produs VARCHAR2(100) NOT NULL);

INSERT INTO COMANDA_STANDARD
VALUES(2, 'pat mahon');
INSERT INTO COMANDA_STANDARD
VALUES(3, 'sifonier 3 usi');
INSERT INTO COMANDA_STANDARD
VALUES(6, 'dulap baie');
INSERT INTO COMANDA_STANDARD
VALUES(7, 'biblioteca');
INSERT INTO COMANDA_STANDARD
VALUES(10, 'masa cafea');

SELECT * FROM COMANDA_STANDARD;



CREATE TABLE COMANDA_PERSONALIZATA(
	Id_comanda INT, 
	CONSTRAINT FK_COMANDA_PERSONALIZATA FOREIGN KEY(Id_comanda) REFERENCES COMANDA_PRODUS(Id_comanda),
	Admisa VARCHAR2(20) NOT NULL,
    CONSTRAINT ADMIS_COMANDA CHECK (Admisa in ('F','T')),
	Link VARCHAR2(300) NOT NULL
    );

INSERT INTO COMANDA_PERSONALIZATA
VALUES(1, 'T', 'https://drive.google.com/file/d/13U8KQCObP8ke');
INSERT INTO COMANDA_PERSONALIZATA
VALUES(4, 'T', 'https://drive.google.com/file/d/1er54g6g4');
INSERT INTO COMANDA_PERSONALIZATA
VALUES(8, 'F', 'https://drive.google.com/file/d/5jydj4srj5j4sr');
INSERT INTO COMANDA_PERSONALIZATA
VALUES(9, 'T', 'https://drive.google.com/file/d/tj4gejnzbs8md');
INSERT INTO COMANDA_PERSONALIZATA
VALUES(5, 'F', 'https://drive.google.com/file/d/45hj1j54nb5fs2');
INSERT INTO COMANDA_PERSONALIZATA
VALUES(11, 'T', 'https://drive.google.com/file/d/5e46b44b4v');
INSERT INTO COMANDA_PERSONALIZATA
VALUES(12, 'T', 'https://drive.google.com/file/d/n4asdfghjkecu');

SELECT * FROM COMANDA_PERSONALIZATA;



CREATE TABLE PRODUS_COMANDAT(
	Id_produs_comandat number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,  
	Pret FLOAT  NOT NULL,
	Id_produs INT, 
	CONSTRAINT FK1_PRODUS_COMANDAT FOREIGN KEY(Id_produs) REFERENCES PRODUS(Id_produs),
	Id_comanda INT, 
	CONSTRAINT FK2_PRODUS_COMANDAT FOREIGN KEY(Id_comanda) REFERENCES COMANDA_PRODUS(Id_comanda),
	Id_factura INT, 
	CONSTRAINT FK3_PRODUS_COMANDAT FOREIGN KEY(Id_factura) REFERENCES FACTURA(Id_factura),
    CONSTRAINT PKEY_PRODUS_COMANDAT PRIMARY KEY(Id_produs_comandat)
    );

INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(2000, 3, 2, 1);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(2500, 1, 3, 1);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(900, 4, 6, 5);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(4500, 6, 7, 7);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(500, 5, 10, 7);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(6000, 3, 1, 7);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(720, 7, 4, 6);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(2500, 3, 9, 3);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(4000, 2, 11, 4);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(7500, 6, 12, 2);
INSERT INTO PRODUS_COMANDAT(pret,id_produs,id_comanda, id_factura)
VALUES(720, 4, 4, 6);

SELECT * FROM PRODUS_COMANDAT;



CREATE TABLE CURIER(
	Id_curier number GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1, 
	Nume VARCHAR2(100) NOT NULL, 
	Prenume VARCHAR2(100) NOT NULL,
	CNP VARCHAR2(20) NOT NULL,
	Telefon VARCHAR2(20) NOT NULL,
	Mail VARCHAR2(100),
    CONSTRAINT PKEY_CURIER PRIMARY KEY(Id_curier),
    CONSTRAINT CNP_CURIER UNIQUE(CNP), CHECK (LENGTH(CNP)=13) 
    );

INSERT INTO CURIER(nume, prenume, cnp, telefon, mail)
VALUES('Popescu','Mihnea', '1780514589642','0764589316',null);
INSERT INTO CURIER(nume, prenume, cnp, telefon, mail)
VALUES('Marinescu','Razvan', '1840618562849','0746259873','razvan.marinescu@yahoo.com');
INSERT INTO CURIER(nume, prenume, cnp, telefon, mail)
VALUES('Birau','Alex', '1891008457892','0743298562','abirau@gmail.com');
INSERT INTO CURIER(nume, prenume, cnp, telefon, mail)
VALUES('Popescu','Robert', '1901118596248','0764458961','popescu_robert@gmail.com');
INSERT INTO CURIER(nume, prenume, cnp, telefon, mail)
VALUES('Mincu','Catalin', '1850128125968','0741259862','mincu.cata@gmail.com');

SELECT * FROM CURIER;



CREATE TABLE LIVREAZA(
	Data DATE NOT NULL, 
	Id_client INT, 
	CONSTRAINT FK1_LIVRARE FOREIGN KEY(Id_client) REFERENCES CLIENT(Id_client),
	Id_curier INT, 
	CONSTRAINT FK2_LIVRARE FOREIGN KEY(Id_curier) REFERENCES CURIER(Id_curier),
	Id_produs_comandat INT, 
	CONSTRAINT FK3_LIVRARE FOREIGN KEY(Id_produs_comandat) REFERENCES PRODUS_COMANDAT (Id_produs_comandat) );

INSERT INTO LIVREAZA
VALUES(to_date('2022-04-15', 'yyyy-mm-dd'),1,3,1);
INSERT INTO LIVREAZA
VALUES(to_date('2022-04-15', 'yyyy-mm-dd'),1,3,2);
INSERT INTO LIVREAZA
VALUES(to_date('2021-10-27', 'yyyy-mm-dd'), 2, 1, 10);
INSERT INTO LIVREAZA
VALUES(to_date('2021-11-01', 'yyyy-mm-dd'), 3, 5, 9);
INSERT INTO LIVREAZA
VALUES(to_date('2022-03-09', 'yyyy-mm-dd'), 2, 4, 8);
INSERT INTO LIVREAZA
VALUES(to_date('2021-12-14', 'yyyy-mm-dd'), 4, 1, 3);
INSERT INTO LIVREAZA
VALUES(to_date('2022-05-19', 'yyyy-mm-dd'), 5, 2, 7);
INSERT INTO LIVREAZA
VALUES(to_date('2021-09-21', 'yyyy-mm-dd'), 6, 2, 5);
INSERT INTO LIVREAZA
VALUES(to_date('2021-09-21', 'yyyy-mm-dd'), 6, 5, 4);
INSERT INTO LIVREAZA
VALUES(to_date('2021-09-21', 'yyyy-mm-dd'), 6, 3, 6);
INSERT INTO LIVREAZA
VALUES(to_date('2022-02-15', 'yyyy-mm-dd'), 5, 2, 21);

SELECT * FROM LIVREAZA;



select * from FABRICA;
SELECT * FROM HALA;
SELECT * FROM DEPARTAMENT;
SELECT * FROM ANGAJAT;
SELECT * FROM MATERIAL;
SELECT * FROM FURNIZOR;
SELECT * FROM PRODUS;
SELECT * FROM CLIENT;
SELECT * FROM FACTURA;
SELECT * FROM CURIER;
SELECT * FROM LIVREAZA;
SELECT * FROM COMANDA_PRODUS;
select * from comanda_standard;
select * from comanda_personalizata;
SELECT * FROM PRODUS_COMANDAT;


drop table FABRICA;
drop table HALA;
drop table DEPARTAMENT;
drop table ANGAJAT;
drop table MATERIAL;
drop table FURNIZOR;
drop table PRODUS_COMANDAT;
drop table PRODUS;
drop table CLIENT;
drop table FACTURA;
drop table CURIER;
drop table LIVREAZA;
drop table COMANDA_PRODUS;





-- exercitiul 6

-- denumirea materialelor a caror cantitate este mai mica si egala cu 5, dar si 
-- numele si telefonul furnizorului de la care pot fi cumparate
-- pentru produsele comandate al carui pret este mai mare decat ... si factura este emisa in luna decembrie,
-- sa se aplice o reducere de 5%

select * from material;
select * from furnizor;
select * from fabrica;
select * from produs_comandat;
select * from factura;

-- procedura stocata, tablou indexat, tablou imbricat

CREATE OR REPLACE PROCEDURE ex6 
    IS 
        TYPE tablou_imbricat IS TABLE OF NUMBER; 
        t tablou_imbricat := tablou_imbricat();
        
        TYPE tablou_indexat IS TABLE OF produs_comandat.id_produs_comandat%TYPE INDEX BY PLS_INTEGER; 
        d tablou_indexat;
        
        nume_material material.nume%TYPE;
        nume_furnizor furnizor.nume%TYPE;
        telefon_furnizor furnizor.telefon%TYPE;
        pret_vechi produs_comandat.pret%TYPE;
        pret_nou produs_comandat.pret%TYPE;
        nr number;
        
        exceptie_1 exception;
        exceptie_2 exception;

    BEGIN 
        
        select count(Id_material)
        into nr
        from material
        where cantitate<=5; 
    
        if nr = 0 
            then raise exceptie_1;
        end if;
    
        select Id_material
        bulk collect into t
        from material
        where cantitate<=5;
        
        dbms_output.put_line('Materiale insuficiente in stoc: ');
        
        for i in t.first..t.last loop
            select m.nume, f.nume, f.telefon
            into nume_material, nume_furnizor, telefon_furnizor
            from material m, furnizor f
            where m.Id_furnizor = f.Id_furnizor
            and m.id_material = t(i);
               
            DBMS_OUTPUT.PUT('ID material: '|| t(i) ); 
            DBMS_OUTPUT.NEW_LINE;
            DBMS_OUTPUT.PUT('material: '||nume_material||', furnizor: '||nume_furnizor||' '||telefon_furnizor ); 
            DBMS_OUTPUT.NEW_LINE;      
        end loop;
        
        DBMS_OUTPUT.NEW_LINE;
        ----------------------------------------------------------------------
        DBMS_OUTPUT.PUT_LINE('Reduceri: ');    
        
        select count(p.Id_produs_comandat)
        into nr
        from produs_comandat p, factura f
        where p.id_factura = f.id_factura
        and p.pret > 500
        and EXTRACT(MONTH FROM f.data) = 12;
        
        if nr = 0 
            then raise exceptie_2;
        end if;
        
        select p.Id_produs_comandat
        bulk collect into d
        from produs_comandat p, factura f
        where p.id_factura = f.id_factura
        and p.pret > 500
        and EXTRACT(MONTH FROM f.data) = 12;
        
        FOR i IN d.FIRST..d.LAST LOOP
            select pret
            into pret_vechi
            from produs_comandat
            where id_produs_comandat = d(i);
            
            DBMS_OUTPUT.PUT('Pentru produsul comandat cu id-ul: '|| d(i) ); 
            DBMS_OUTPUT.NEW_LINE;
            DBMS_OUTPUT.PUT('pret vechi: '||pret_vechi || ' '); 
            DBMS_OUTPUT.NEW_LINE;
            
            --maresc cu 5% 
            update produs_comandat
            set pret = pret - (pret * 5/100)
            where id_produs_comandat = d(i)
            RETURNING pret
            INTO pret_nou;
            
            
            DBMS_OUTPUT.PUT('pret nou: '||pret_nou ); 
            DBMS_OUTPUT.NEW_LINE;
    
        END LOOP;
        
    EXCEPTION 
        WHEN exceptie_1
            THEN DBMS_OUTPUT.PUT_LINE('Nu exista materiale cu stoc insuficient.'); 
        WHEN exceptie_2
            THEN DBMS_OUTPUT.PUT_LINE('Nu exista produse comandate care sa respecte conditiile pentru reducere.'); 
        WHEN OTHERS 
            THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!'); 
END ex6; 
/ 

-- metode apelare 
-- Bloc PLSQL 
BEGIN 
    ex6; 
END; 
/





-- exercitiul 7

-- pentru fiecare fabrica si fiecare departament al acesteia sa se afiseze 
-- numarul de angajati, suma salariilor si valoarea medie a veniturilor angajatilor


select * from fabrica;
select * from hala;
select * from departament;
select * from angajat;


CREATE OR REPLACE PROCEDURE ex7 
    (fabrica_id fabrica.id_fabrica%TYPE) 
IS
    id_dep departament.Id_departament%TYPE;
    nume_dep departament.nume%TYPE;
    a_nume angajat.nume%TYPE;
    a_prenume angajat.prenume%TYPE;
    a_salariu angajat.salariu%TYPE;
    n_fab fabrica.nume%TYPE;
    l_fab fabrica.locatie%TYPE;
    
    CURSOR c2(id departament.id_departament%TYPE) IS 
        SELECT nume nume, prenume prenume, salariu salariu 
        FROM angajat
        WHERE id_departament = id; 
        
    ang   number;
    v_lunar number;
    v_medie number;
    nr number;
    exc exception;
    total_ang   number := 0;
    total_v_lunar number := 0;
    total_v_medie number(9,2) := 0;
    
BEGIN 
    
    select count(*)
    into nr
    from fabrica
    where id_fabrica = fabrica_id;
    
    if nr = 0
        then raise exc;
    end if;
    
    select nume, locatie
    into n_fab, l_fab
    from fabrica
    where id_fabrica = fabrica_id;
    
    DBMS_OUTPUT.PUT_LINE('Pentru fabrica '||n_fab||' din '||l_fab); 

    FOR i IN ( select d.id_departament id_dep, d.nume nume_dep
               from departament d, hala h 
               where h.id_fabrica = fabrica_id
               and d.id_hala = h.id_hala) 
    LOOP 
        DBMS_OUTPUT.NEW_LINE(); 
        DBMS_OUTPUT.PUT_LINE('Departament: ' || upper(i.nume_dep) || '. Angajati:'); 
        
        OPEN c2(i.id_dep); 
        ang:=0; 
        v_lunar := 0;
        v_medie := 0;
        
        LOOP 
            FETCH c2 into a_nume, a_prenume, a_salariu; 
            EXIT WHEN c2%NOTFOUND; 
            ang := ang +1; 
            v_lunar := v_lunar + a_salariu;
            IF ang != 0 
                THEN DBMS_OUTPUT.PUT_LINE(' - '|| ang || '.  ' || a_nume || ' ' || a_prenume || ', salariu ' || a_salariu); 
            END IF; 
        END LOOP;
        close c2;
        
        IF ang = 0 
                THEN DBMS_OUTPUT.PUT_LINE('  Nu sunt angajati aici.'); 
        else      
            DBMS_OUTPUT.NEW_LINE(); 
            DBMS_OUTPUT.PUT_LINE('Numarul de angajati este: '|| ang); 
            DBMS_OUTPUT.PUT_LINE('Valoarea lunara a veniturilor angajatilor este: '|| v_lunar); 
            v_medie := v_lunar / ang;
            DBMS_OUTPUT.PUT_LINE('Valoarea medie a veniturilor angajatilor este: '|| v_medie); 
        END IF;  
        
        total_ang := total_ang + ang;
        total_v_lunar := total_v_lunar + v_lunar;
    END LOOP; 
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.PUT_LINE('Numarul total de angajati din fabrica este: '|| total_ang); 
    DBMS_OUTPUT.PUT_LINE('Valoarea lunara totala a veniturilor angajatilor este: '|| total_v_lunar); 
    total_v_medie := total_v_lunar / total_ang;
    DBMS_OUTPUT.PUT_LINE('Valoarea medie totala a veniturilor angajatilor este: '|| total_v_medie); 

        
EXCEPTION 
        WHEN exc
            THEN DBMS_OUTPUT.PUT_LINE('Nu exista fabrica cu id-ul dat.');
        WHEN ZERO_DIVIDE 
            THEN DBMS_OUTPUT.PUT_LINE('Impartirea la 0 nu este permisa');
        WHEN CURSOR_ALREADY_OPEN
            THEN DBMS_OUTPUT.PUT_LINE('Cursor deja deschis.'); 
        WHEN OTHERS 
            THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!'); 
END ex7; 
/ 

-- metode apelare 
-- Bloc PLSQL 
BEGIN 
    ex7('1'); 
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
    ex7('2'); 
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
    ex7('3'); 
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
    ex7('4'); 
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
    ex7('5'); 
    
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
    ex7('6'); -- id gresit
END; 
/




-- ex 8

-- se da numele unui client si id-ul facturii acestuia. Se cere sa se calculeze totalul de plata de pe 
-- facturile acestuia, iar in cazul in care suma actuala difera, sa se actualizeze

select * from client;
select * from factura;
select * from produs_comandat;


CREATE OR REPLACE FUNCTION ex8 
    (v_nume client.nume%TYPE,
    id_fac factura.Id_factura%type) 
    RETURN NUMBER 
IS 
    pret_total factura.total_plata%type; 
    pret_prod produs_comandat.pret%type;
    nr number;
    exceptie1 exception;
    exceptie2 exception;
    
BEGIN 
    select count(*)
    into nr
    from client
    where upper(nume) = upper(v_nume);
    
    if nr > 1 
        then raise exceptie1;
    elsif nr = 0 
        then raise exceptie2;
    end if;

    SELECT SUM(p.pret)
    INTO pret_total
    FROM produs_comandat p, client c, factura f
    WHERE c.Id_client = f.Id_client
    and f.Id_factura = p.Id_factura
    and UPPER(c.nume) = UPPER(v_nume)
    and f.id_factura = id_fac;
    
    RETURN pret_total; 

EXCEPTION 
    WHEN exceptie1
        THEN DBMS_OUTPUT.PUT_LINE('Exista mai multi clienti cu numele dat'); 
        return 0;
    WHEN exceptie2
        THEN DBMS_OUTPUT.PUT_LINE('Nu exista clienti cu numele dat'); 
        return 0;
    WHEN OTHERS 
        THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!'); 
        return 0;
        
END ex8; 
/

--pt too many rows
INSERT INTO CLIENT(nume, prenume, telefon, mail)
VALUES ('Popa','Roxana', '0762567435','popa@gmail.com');

select * from client;
-- apelare
declare
    total factura.total_plata%TYPE;
    v_nume client.nume%TYPE := '&_nume_client';
    val_fct number;
    exceptie exception;
    nr number;
begin

    select count(*)
    into nr
    from client
    where upper(nume) = upper(v_nume);
    
    if  nr = 0 
        then raise exceptie;
    end if;

    for i in (select f.id_factura id_fac
                from factura f, client c
                where c.Id_client = f.Id_client
                and UPPER(c.nume) = UPPER(v_nume)) loop

        DBMS_OUTPUT.PUT_LINE('Nume client: '||v_nume);
        select ex8(v_nume,i.id_fac) into val_fct from dual; 

        select f.total_plata 
        into total 
        from factura f, client c
        where c.Id_client = f.Id_client
        and UPPER(c.nume) = UPPER(v_nume)
        and f.id_factura = i.id_fac;
        
        if total != val_fct and val_fct != 0 then
            update factura
            set total_plata = val_fct
            where Id_client = ( select f.id_client
                                from client c, factura f
                                where c.Id_client = f.Id_client
                                and UPPER(c.nume) = UPPER(v_nume)
                                and f.id_factura = i.id_fac);
            DBMS_OUTPUT.put_line('Totalul a fost actualizat!');
        elsif total = val_fct and val_fct != 0 then
            DBMS_OUTPUT.put_line('Id factura: '||i.id_fac);
            DBMS_OUTPUT.put_line('Valorile sunt egale!');
        end if; 
    end loop;
exception 
    WHEN exceptie
        THEN DBMS_OUTPUT.PUT_LINE('Nu exista clienti cu numele dat: '||v_nume); 
end;
/

-- apelare:
-- Popa, Florea, Balan, Racea



-- exercitiul 9

select * from factura;
select * from produs_comandat;
select * from client;
select * from curier;
select * from livreaza;


CREATE OR REPLACE PROCEDURE ex9
    (c_prenume curier.prenume%TYPE) 
IS 
    total factura.total_plata%TYPE;
    data_livrare livreaza.data%TYPE;
    nr_prod number;
    curier varchar2(100);
    client varchar2(100);
BEGIN 
    select max(c.nume||' '||c.prenume) curier, max(cl.nume||' '||cl.prenume) client,l.data, count(p.id_factura) nr_produse, f.total_plata
    into curier, client, data_livrare, nr_prod, total
    from curier c JOIN livreaza l ON (l.id_curier = c.id_curier)
    JOIN client cl ON (l.id_client = cl.id_client)
    JOIN produs_comandat p ON (l.id_produs_comandat = p.id_produs_comandat)
    JOIN factura f ON (f.id_client = cl.id_client 
                        and p.id_factura = f.id_factura)
    where c.prenume = c_prenume
    group by p.id_factura,f.total_plata, l.data;
    
    dbms_output.put_line('Curierul '||curier||' livreaza la data de '||data_livrare||' clientului '||
    client||' '||nr_prod||' produse, cu un total de plata de '||total);

EXCEPTION 
    WHEN NO_DATA_FOUND 
        THEN dbms_output.put_line('Nu exista curieri cu prenumele introdus.'); 
    WHEN TOO_MANY_ROWS 
        THEN dbms_output.put_line('Exista mai multi curieri cu prenumele introdus.'); 
    WHEN OTHERS 
        THEN dbms_output.put_line('Alta eroare!'); 
END ex9; 
/ 

-- apelare
BEGIN 
    ex9('Robert'); 
    ex9('Calin');
    ex9('Alex'); 
END;
/

INSERT INTO CURIER(nume, prenume, cnp, telefon, mail)
VALUES('Moraru','Alex', '1891008457867','0743258562','alex_m@gmail.com');


-- ex 10
-- trigger LMD la nivel de comanda

-- interval ora

CREATE OR REPLACE TRIGGER trig_ex10
    BEFORE INSERT OR DELETE OR UPDATE on produs
BEGIN
    IF (TO_CHAR(SYSDATE,'D') = 1 or TO_CHAR(SYSDATE,'D') = 7) OR (TO_CHAR(SYSDATE,'HH24')  BETWEEN 8 AND 20)
        THEN
            IF INSERTING THEN
                RAISE_APPLICATION_ERROR(-20001,'Inserarea in tabel este permisa doar in timpul programului de lucru!');
            ELSIF DELETING THEN
                RAISE_APPLICATION_ERROR(-20002,'Stergerea din tabel este permisa doar in timpul programului de lucru!');
            ELSE
                RAISE_APPLICATION_ERROR(-20003,'Actualizarile in tabel sunt permise doar in timpul programului de lucru!');
            END IF;
    END IF;
END;
/

INSERT INTO PRODUS(categorie, nume, pret, dimensiune)
VALUES ('bucatarie', 'scaun cires', 150, '100x40x40');

delete
from produs
where id_produs=1;

update produs
set categorie = 'alta'
where id_produs = 1;

alter TRIGGER trig_ex10
disable;

-- ex 11
-- trigger LMD la nivel de linie


CREATE OR REPLACE TRIGGER trig_ex11
    BEFORE UPDATE OF categorie ON produs
    FOR EACH ROW
    WHEN (NEW.categorie <> OLD.categorie)
BEGIN
    RAISE_APPLICATION_ERROR (-20000, 'Nu puteti modifica categoria unui produs din catalog!');
END;
/

update produs
set categorie = 'alta'
where id_produs = 1;



-- ex 12 
-- trigger LDD


CREATE TABLE user_action
    (nume_bd VARCHAR2(50),
    user_logat VARCHAR2(30),
    eveniment VARCHAR2(20),
    tip_obiect_referit VARCHAR2(30),
    nume_obiect_referit VARCHAR2(30),
    data TIMESTAMP(3));


CREATE OR REPLACE TRIGGER modificari
    AFTER CREATE OR DROP OR ALTER ON SCHEMA
BEGIN
    INSERT INTO user_action
    VALUES (SYS.DATABASE_NAME, SYS.LOGIN_USER,
            SYS.SYSEVENT, SYS.DICTIONARY_OBJ_TYPE,
            SYS.DICTIONARY_OBJ_NAME, SYSTIMESTAMP(3));
END;
/

SELECT * FROM user_action;

drop trigger modificari;
drop table user_action;



-- exercitiul 13

CREATE OR REPLACE PACKAGE pachet_ex13 AS

    PROCEDURE ex6 ;
    
    PROCEDURE ex7 (fabrica_id fabrica.id_fabrica%TYPE); 
    
    FUNCTION ex8 (v_nume client.nume%TYPE, id_fac factura.Id_factura%type) 
    RETURN NUMBER ;
    
     PROCEDURE ex9 (c_prenume curier.prenume%TYPE);
    
end pachet_ex13;
/



CREATE OR REPLACE PACKAGE BODY pachet_ex13 AS
    
    PROCEDURE ex6 
    IS 
        TYPE tablou_imbricat IS TABLE OF NUMBER; 
        t tablou_imbricat := tablou_imbricat();
        
        TYPE tablou_indexat IS TABLE OF produs_comandat.id_produs_comandat%TYPE INDEX BY PLS_INTEGER; 
        d tablou_indexat;
        
        nume_material material.nume%TYPE;
        nume_furnizor furnizor.nume%TYPE;
        telefon_furnizor furnizor.telefon%TYPE;
        pret_vechi produs_comandat.pret%TYPE;
        pret_nou produs_comandat.pret%TYPE;
        nr number;
        
        exceptie_1 exception;
        exceptie_2 exception;

    BEGIN 
        
        select count(Id_material)
        into nr
        from material
        where cantitate<=5; 
    
        if nr = 0 
            then raise exceptie_1;
        end if;
    
        select Id_material
        bulk collect into t
        from material
        where cantitate<=5;
        
        dbms_output.put_line('Materiale insuficiente in stoc: ');
        
        for i in t.first..t.last loop
            select m.nume, f.nume, f.telefon
            into nume_material, nume_furnizor, telefon_furnizor
            from material m, furnizor f
            where m.Id_furnizor = f.Id_furnizor
            and m.id_material = t(i);
               
            DBMS_OUTPUT.PUT('ID material: '|| t(i) ); 
            DBMS_OUTPUT.NEW_LINE;
            DBMS_OUTPUT.PUT('material: '||nume_material||', furnizor: '||nume_furnizor||' '||telefon_furnizor ); 
            DBMS_OUTPUT.NEW_LINE;      
        end loop;
        
        DBMS_OUTPUT.NEW_LINE;
        ----------------------------------------------------------------------
        DBMS_OUTPUT.PUT_LINE('Reduceri: ');    
        
        select count(p.Id_produs_comandat)
        into nr
        from produs_comandat p, factura f
        where p.id_factura = f.id_factura
        and p.pret > 500
        and EXTRACT(MONTH FROM f.data) = 12;
        
        if nr = 0 
            then raise exceptie_2;
        end if;
        
        select p.Id_produs_comandat
        bulk collect into d
        from produs_comandat p, factura f
        where p.id_factura = f.id_factura
        and p.pret > 500
        and EXTRACT(MONTH FROM f.data) = 12;
        
        FOR i IN d.FIRST..d.LAST LOOP
            select pret
            into pret_vechi
            from produs_comandat
            where id_produs_comandat = d(i);
            
            DBMS_OUTPUT.PUT('Pentru produsul comandat cu id-ul: '|| d(i) ); 
            DBMS_OUTPUT.NEW_LINE;
            DBMS_OUTPUT.PUT('pret vechi: '||pret_vechi || ' '); 
            DBMS_OUTPUT.NEW_LINE;
            
            --maresc cu 5% 
            update produs_comandat
            set pret = pret - (pret * 5/100)
            where id_produs_comandat = d(i)
            RETURNING pret
            INTO pret_nou;
            
            
            DBMS_OUTPUT.PUT('pret nou: '||pret_nou ); 
            DBMS_OUTPUT.NEW_LINE;
    
        END LOOP;
        
    EXCEPTION 
        WHEN exceptie_1
            THEN DBMS_OUTPUT.PUT_LINE('Nu exista materiale cu stoc insuficient.'); 
        WHEN exceptie_2
            THEN DBMS_OUTPUT.PUT_LINE('Nu exista produse comandate care sa respecte conditiile pentru reducere.'); 
        WHEN OTHERS 
            THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!'); 
    END ex6; 

    
    PROCEDURE ex7 
        (fabrica_id fabrica.id_fabrica%TYPE) 
    IS
        id_dep departament.Id_departament%TYPE;
        nume_dep departament.nume%TYPE;
        a_nume angajat.nume%TYPE;
        a_prenume angajat.prenume%TYPE;
        a_salariu angajat.salariu%TYPE;
        n_fab fabrica.nume%TYPE;
        l_fab fabrica.locatie%TYPE;
        
        CURSOR c2(id departament.id_departament%TYPE) IS 
            SELECT nume nume, prenume prenume, salariu salariu 
            FROM angajat
            WHERE id_departament = id; 
            
        ang   number;
        v_lunar number;
        v_medie number;
        nr number;
        exc exception;
        total_ang   number := 0;
        total_v_lunar number := 0;
        total_v_medie number(9,2) := 0;
        
    BEGIN 
    
        select count(*)
        into nr
        from fabrica
        where id_fabrica = fabrica_id;
        
        if nr = 0
            then raise exc;
        end if;
        
        select nume, locatie
        into n_fab, l_fab
        from fabrica
        where id_fabrica = fabrica_id;
        
        DBMS_OUTPUT.PUT_LINE('Pentru fabrica '||n_fab||' din '||l_fab); 
    
        FOR i IN ( select d.id_departament id_dep, d.nume nume_dep
                   from departament d, hala h 
                   where h.id_fabrica = fabrica_id
                   and d.id_hala = h.id_hala) 
        LOOP 
            DBMS_OUTPUT.NEW_LINE(); 
            DBMS_OUTPUT.PUT_LINE('Departament: ' || upper(i.nume_dep) || '. Angajati:'); 
            
            OPEN c2(i.id_dep); 
            ang:=0; 
            v_lunar := 0;
            v_medie := 0;
            
            LOOP 
                FETCH c2 into a_nume, a_prenume, a_salariu; 
                EXIT WHEN c2%NOTFOUND; 
                ang := ang +1; 
                v_lunar := v_lunar + a_salariu;
                IF ang != 0 
                    THEN DBMS_OUTPUT.PUT_LINE(' - '|| ang || '.  ' || a_nume || ' ' || a_prenume || ', salariu ' || a_salariu); 
                END IF; 
            END LOOP;
            close c2;
            
            IF ang = 0 
                    THEN DBMS_OUTPUT.PUT_LINE('  Nu sunt angajati aici.'); 
            else      
                DBMS_OUTPUT.NEW_LINE(); 
                DBMS_OUTPUT.PUT_LINE('Numarul de angajati este: '|| ang); 
                DBMS_OUTPUT.PUT_LINE('Valoarea lunara a veniturilor angajatilor este: '|| v_lunar); 
                v_medie := v_lunar / ang;
                DBMS_OUTPUT.PUT_LINE('Valoarea medie a veniturilor angajatilor este: '|| v_medie); 
            END IF;  
            
            total_ang := total_ang + ang;
            total_v_lunar := total_v_lunar + v_lunar;
        END LOOP; 
        DBMS_OUTPUT.NEW_LINE(); 
        DBMS_OUTPUT.NEW_LINE(); 
        DBMS_OUTPUT.PUT_LINE('Numarul total de angajati din fabrica este: '|| total_ang); 
        DBMS_OUTPUT.PUT_LINE('Valoarea lunara totala a veniturilor angajatilor este: '|| total_v_lunar); 
        total_v_medie := total_v_lunar / total_ang;
        DBMS_OUTPUT.PUT_LINE('Valoarea medie totala a veniturilor angajatilor este: '|| total_v_medie); 

        
    EXCEPTION 
        WHEN exc
            THEN DBMS_OUTPUT.PUT_LINE('Nu exista fabrica cu id-ul dat.');
        WHEN ZERO_DIVIDE 
            THEN DBMS_OUTPUT.PUT_LINE('Impartirea la 0 nu este permisa');
        WHEN CURSOR_ALREADY_OPEN
            THEN DBMS_OUTPUT.PUT_LINE('Cursor deja deschis.'); 
        WHEN OTHERS 
            THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!'); 
    END ex7; 
    

    FUNCTION ex8 
        (v_nume client.nume%TYPE,
        id_fac factura.Id_factura%type) 
        RETURN NUMBER 
    IS 
        pret_total factura.total_plata%type; 
        pret_prod produs_comandat.pret%type;
        nr number;
        exceptie1 exception;
        exceptie2 exception;
        
    BEGIN 
        select count(*)
        into nr
        from client
        where upper(nume) = upper(v_nume);
        
        if nr > 1 
            then raise exceptie1;
        elsif nr = 0 
            then raise exceptie2;
        end if;
    
        SELECT SUM(p.pret)
        INTO pret_total
        FROM produs_comandat p, client c, factura f
        WHERE c.Id_client = f.Id_client
        and f.Id_factura = p.Id_factura
        and UPPER(c.nume) = UPPER(v_nume)
        and f.id_factura = id_fac;
        
        RETURN pret_total; 
    
    EXCEPTION 
        WHEN exceptie1
            THEN DBMS_OUTPUT.PUT_LINE('Exista mai multi clienti cu numele dat'); 
            return 0;
        WHEN exceptie2
            THEN DBMS_OUTPUT.PUT_LINE('Nu exista clienti cu numele dat'); 
            return 0;
        WHEN OTHERS 
            THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!'); 
            return 0;
            
    END ex8;
    
    
    
    PROCEDURE ex9
        (c_prenume curier.prenume%TYPE) 
    IS 
        total factura.total_plata%TYPE;
        data_livrare livreaza.data%TYPE;
        nr_prod number;
        curier varchar2(100);
        client varchar2(100);
    BEGIN 
        select max(c.nume||' '||c.prenume) curier, max(cl.nume||' '||cl.prenume) client,l.data, count(p.id_factura) nr_produse, f.total_plata
        into curier, client, data_livrare, nr_prod, total
        from curier c JOIN livreaza l ON (l.id_curier = c.id_curier)
        JOIN client cl ON (l.id_client = cl.id_client)
        JOIN produs_comandat p ON (l.id_produs_comandat = p.id_produs_comandat)
        JOIN factura f ON (f.id_client = cl.id_client 
                            and p.id_factura = f.id_factura)
        where c.prenume = c_prenume
        group by p.id_factura,f.total_plata, l.data;
        
        dbms_output.put_line('Curierul '||curier||' livreaza la data de '||data_livrare||' clientului '||
        client||' '||nr_prod||' produse, cu un total de plata de '||total);
    
    EXCEPTION 
        WHEN NO_DATA_FOUND 
            THEN dbms_output.put_line('Nu exista curieri cu prenumele introdus.'); 
        WHEN TOO_MANY_ROWS 
            THEN dbms_output.put_line('Exista mai multi curieri cu prenumele introdus.'); 
        WHEN OTHERS 
            THEN dbms_output.put_line('Alta eroare!'); 
    END ex9; 

end pachet_ex13;
/

-- apelare


declare
    total factura.total_plata%TYPE;
    v_nume client.nume%TYPE := '&_nume_client';
    val_fct number;
    exceptie exception;
    nr number;
BEGIN 
--    
--    DBMS_OUTPUT.PUT_LINE('----------------- ex 6 -------------------'); 
--    pachet_ex13.ex6;
--    
--    DBMS_OUTPUT.NEW_LINE(); 
--    DBMS_OUTPUT.PUT_LINE('----------------- ex 7 -------------------'); 
--    DBMS_OUTPUT.NEW_LINE(); 
--
--    pachet_ex13.ex7('1'); 
--    DBMS_OUTPUT.NEW_LINE(); 
--    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
--    pachet_ex13.ex7('2'); 
--    DBMS_OUTPUT.NEW_LINE(); 
--    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
--    pachet_ex13.ex7('3'); 
--    DBMS_OUTPUT.NEW_LINE(); 
--    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
--    pachet_ex13.ex7('4'); 
--    DBMS_OUTPUT.NEW_LINE(); 
--    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
--    pachet_ex13.ex7('5'); 
--    DBMS_OUTPUT.NEW_LINE(); 
--    DBMS_OUTPUT.PUT_LINE('------------------------------------'); 
--    pachet_ex13.ex7('6'); -- id gresit

    
    DBMS_OUTPUT.NEW_LINE(); 
    DBMS_OUTPUT.PUT_LINE('----------------- ex 8 -------------------'); 
    DBMS_OUTPUT.NEW_LINE();
    
    select count(*)
    into nr
    from client
    where upper(nume) = upper(v_nume);
    
    if  nr = 0 
        then DBMS_OUTPUT.PUT_LINE('Nu exista clienti cu numele dat: '||v_nume); 
    end if;

    for i in (select f.id_factura id_fac
                from factura f, client c
                where c.Id_client = f.Id_client
                and UPPER(c.nume) = UPPER(v_nume)) loop

        DBMS_OUTPUT.PUT_LINE('Nume client: '||v_nume);
        select pachet_ex13.ex8(v_nume,i.id_fac) into val_fct from dual; 

        select f.total_plata 
        into total 
        from factura f, client c
        where c.Id_client = f.Id_client
        and UPPER(c.nume) = UPPER(v_nume)
        and f.id_factura = i.id_fac;
        
        if total != val_fct and val_fct != 0 then
            update factura
            set total_plata = val_fct
            where Id_client = ( select f.id_client
                                from client c, factura f
                                where c.Id_client = f.Id_client
                                and UPPER(c.nume) = UPPER(v_nume)
                                and f.id_factura = i.id_fac);
            DBMS_OUTPUT.put_line('Totalul a fost actualizat!');
        elsif total = val_fct and val_fct != 0 then
            DBMS_OUTPUT.put_line('Id factura: '||i.id_fac);
            DBMS_OUTPUT.put_line('Valorile sunt egale!');
        end if; 
    end loop;
--
--    DBMS_OUTPUT.NEW_LINE(); 
--    DBMS_OUTPUT.PUT_LINE('----------------- ex 9 -------------------'); 
--    DBMS_OUTPUT.NEW_LINE(); 
--    
--    pachet_ex13.ex9('Robert'); 
--    pachet_ex13.ex9('Calin');
--    pachet_ex13.ex9('Alex'); 

END; 
/



-------------------------- exercitiul 14 -----------------------------------------------------------------------------------------------------



select * from client;
select * from factura;
select * from comanda_produs;
select * from comanda_standard;
select * from produs_comandat;

CREATE OR REPLACE PACKAGE pachet_ex14 IS

    TYPE t_idx IS TABLE OF hala%rowtype INDEX BY PLS_INTEGER;
    hali t_idx;

    cursor departamente_fab (hala_id hala.id_hala%type, denumirefab fabrica.nume%type) return departament%rowtype;

    TYPE inf_angajat IS RECORD
            (nume varchar2(100),
            cnp angajat.cnp%TYPE,
            tel angajat.telefon%TYPE,
            exceptie varchar2(100));
 
     -- functie care returneaza datele unui angajat          
    function info_angajati 
        (nume_ang angajat.nume%type,
         prenume_ang angajat.prenume%TYPE)    
    return inf_angajat;    
    
       -- functie obtinere cod fabrica dupa numele acesteia
     FUNCTION GetFabrica (denumire_fab fabrica.nume%type) 
             RETURN fabrica.id_fabrica%type ;
    
     --- angajatii dintr-un departament ---    
    procedure ang_dep (departament_id departament.id_departament%TYPE);
    
    -- pentru o fabrica al carei nume este dat, pentru fiecare hala, afisati angajatii care lucreaza in departamentele ce apartin halei curente sau afisati 'nu exista'
    -- daca pentru departamentul x nu exista 
    PROCEDURE fabrica_ang (denumirefab fabrica.nume%TYPE);



END pachet_ex14;
/

CREATE OR REPLACE PACKAGE BODY pachet_ex14 IS

    cursor departamente_fab (hala_id hala.id_hala%type, denumirefab fabrica.nume%type) return departament%rowtype
        is
            SELECT d.Id_departament id_dep, d.nume nume, d.id_hala
            FROM departament d, hala h, fabrica f
            WHERE f.Id_fabrica=h.id_fabrica and h.id_hala=d.id_hala
            and h.id_hala = hala_id
            AND UPPER(f.nume) LIKE  UPPER(denumirefab);
            
     
    -- functie obtinere cod fabrica dupa numele acesteia
     FUNCTION GetFabrica (denumire_fab fabrica.nume%type) 
             RETURN fabrica.id_fabrica%type 
        AS
             v_fabrica_id fabrica.id_fabrica%type;
             nr NUMBER(6);
        BEGIN
--                DBMS_OUTPUT.PUT_LINE('Nume fabrica: ' || denumire_fab);
                SELECT COUNT(id_fabrica)
                INTO nr
                FROM fabrica f
                WHERE upper(f.nume) = upper(denumire_fab);
                
                IF nr > 1 THEN
                    DBMS_OUTPUT.PUT_LINE('Exista mai multe fabrici cu acest nume.');
                    RETURN 0;
                ELSIF nr = 0 THEN
                    DBMS_OUTPUT.PUT_LINE('Nu exista fabrici cu acest nume.');
                    RETURN 0;
                ELSE 
                    SELECT id_fabrica
                    INTO v_fabrica_id
                    FROM fabrica f
                     WHERE upper(f.nume) = upper(denumire_fab);
                        
                    RETURN v_fabrica_id;
                    
                END IF;
    END GetFabrica;
    
    
    
               
    -- functie care returneaza datele unui angajat
    function info_angajati 
        (nume_ang angajat.nume%type,
         prenume_ang angajat.prenume%TYPE)
        
    return inf_angajat
    is 
        rezultat inf_angajat;
       
    begin
  
        select nume_ang||' '||prenume_ang, cnp, telefon, '-'
        into rezultat
        from angajat
        where id_angajat = (select id_angajat
                            from angajat a
                            where a.nume = nume_ang
                            and a.prenume = prenume_ang);


        return rezultat;
        
    exception
        when NO_DATA_FOUND then 
                select '-','-','-','no data found'
                into rezultat
                from dual; 
                return rezultat;
        when TOO_MANY_ROWS then 
                select '-','-','-','too many rows'
                into rezultat
                from dual; 
                return rezultat;
            
    end info_angajati;

    
  
 --- angajatii dintr-un departament ---   
    
    procedure ang_dep (departament_id departament.id_departament%TYPE)
    IS
        TYPE refcursor IS REF CURSOR; 
        CURSOR c_dept IS 
            SELECT nume, 
                CURSOR (SELECT nume n, prenume p 
                        FROM angajat a 
                        WHERE a.id_departament = d.id_departament) 
            FROM departament d 
            WHERE id_departament = departament_id; 
        
        v_nume_dept departament.nume%TYPE; 
        v_cursor refcursor; 
        v_nume varchar2(100); 
        v_prenume varchar2(100);
        nr number;
        
    BEGIN 
        OPEN c_dept; 
        LOOP 
            FETCH c_dept 
                INTO v_nume_dept, v_cursor; 
            EXIT WHEN c_dept%NOTFOUND; 
            DBMS_OUTPUT.PUT_LINE ('DEPARTAMENT: '||v_nume_dept); 
            DBMS_OUTPUT.PUT_LINE('-------------------------------------'); 
          
            nr := 0;
            LOOP 
                FETCH v_cursor 
                INTO v_nume, v_prenume;  --angajati din departamentul curent
                EXIT WHEN v_cursor%NOTFOUND; 
                nr := nr+1;
                if info_angajati(v_nume, v_prenume).exceptie = 'no data found'  
                    then  dbms_output.put_line('exceptie: no data found');
                elsif info_angajati(v_nume, v_prenume).exceptie = 'too many rows'  
                    then  dbms_output.put_line('exceptie: too many rows');
                else
                    dbms_output.put_line('-Nume: '||info_angajati(v_nume, v_prenume).nume);
                    dbms_output.put_line('-CNP: '||info_angajati(v_nume, v_prenume).cnp);  
                    dbms_output.put_line('-Telefon: '||info_angajati(v_nume, v_prenume).tel);
                end if;
                    dbms_output.new_line();
            END LOOP; 
            
            if nr = 0 
                then dbms_output.put_line('Nu exista angajati in departament.'); 
                    DBMS_OUTPUT.NEW_LINE;
            end if;
            
        END LOOP; 
        CLOSE c_dept; 
    END ang_dep; 
    
    
-- pentru o fabrica al carei nume este dat, pentru fiecare hala, afisati angajatii care lucreaza in departamentele ce apartin halei curente sau afisati 'nu exista'
-- daca pentru departamentul x nu exista

    PROCEDURE fabrica_ang 
        (denumirefab fabrica.nume%TYPE)
    AS 
        numar NUMBER(6);
        id_fab number;
        
    BEGIN
         
        DBMS_OUTPUT.PUT_LINE('Nume fabrica: ' || denumirefab);       
        if GetFabrica(denumirefab) != 0 then

            id_fab := GetFabrica(denumirefab);
        
            SELECT h.Id_hala, h.suprafata, h.nume, h.id_fabrica 
            BULK COLLECT INTO hali
            FROM hala h, fabrica f
            WHERE h.id_fabrica = f.Id_fabrica
            AND f.id_fabrica = id_fab;
           
            
            FOR i IN hali.first..hali.last LOOP
                DBMS_OUTPUT.PUT_LINE('HALA: ' || hali(i).nume);
                DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
                
                SELECT COUNT(*)
                INTO numar
                FROM departament d, hala h, fabrica f
                WHERE f.Id_fabrica=h.id_fabrica and h.id_hala=d.id_hala
                and h.id_hala = hali(i).id_hala
                AND f.id_fabrica = id_fab;
    
                
                if numar = 0 
                    then DBMS_OUTPUT.PUT_LINE('Nu exista departamente in hala');
                else
                FOR j IN departamente_fab(hali(i).id_hala, denumirefab) LOOP
                
                    ang_dep(j.id_departament);  -- apelare procedura anterioara
        
                END LOOP;
                end if;
    --            DBMS_OUTPUT.NEW_LINE;
    --            DBMS_OUTPUT.NEW_LINE;
            END LOOP;
        end if;
        DBMS_OUTPUT.NEW_LINE;
        
    END fabrica_ang;
    

END pachet_ex14;
/

-- apelare

begin

    pachet_ex14.fabrica_ang('the home');
    DBMS_OUTPUT.NEW_LINE;
    pachet_ex14.fabrica_ang('your furniture');
    DBMS_OUTPUT.NEW_LINE;
    pachet_ex14.fabrica_ang('mob design');
    DBMS_OUTPUT.NEW_LINE;
    
    pachet_ex14.fabrica_ang('mob expert'); -- too many rows
    DBMS_OUTPUT.NEW_LINE;
    pachet_ex14.fabrica_ang('mobila'); -- no data found
    
end;
/






